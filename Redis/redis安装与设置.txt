https://blog.csdn.net/gaoqingwuma/article/details/78341940
慕课网：https://www.imooc.com/video/14926
1. tar -zxvf redis-4.0.11.tar.gz
2. cd redis-4.0.11
3. make （如果失败，需要sudo apt-get update，再sudo apt-get install gcc，再sudo apt-get install make）
4. make好之后，sudo make PREFIX=/usr/local/redis install，则将redis安装在了/usr/local/redis
5. cp /home/ben/Downloads/redis-4.0.11/redis.conf /usr/local/redis
6. 前端启动：进入到cd /usr/local/redis/bin，执行./redis-server，前端启动redis，但是此时命令行无法操作（不建议此前端启动方式）
7. 后端启动：修改redis.conf里的daemonize no为daemonize yes，进入到cd /usr/local/redis，执行./bin/redis-server ./redis.conf，启动后通过ps -ef | grep redis来查看是否有redis服务启动
8. 关闭redis：
    kill 9 12250（不建议）
    ./bin/redis-cli shutdown（建议）
9. 测试：
root@ben-virtual-machine:/usr/local/redis# ./bin/redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379> get name
"imooc"
127.0.0.1:6379> del name
(integer) 1
127.0.0.1:6379> get name
(nil)
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379> set name dingben
OK
127.0.0.1:6379> keys name
1) "name"
127.0.0.1:6379> keys *
1) "name"

#字符串
127.0.0.1:6379> get company
"imooc"
127.0.0.1:6379> getset company baidu #先取值，再设值
"imooc"
127.0.0.1:6379> get company
"baidu"
127.0.0.1:6379> get person
"jack"
127.0.0.1:6379> incr person #如果不能转换为数值，则报错
(error) ERR value is not an integer or out of range
127.0.0.1:6379> incr num #如果不存在，则会将值设置初始为0，再加1
(integer) 1
127.0.0.1:6379> get num
"1"
127.0.0.1:6379> decr num
(integer) 0
127.0.0.1:6379> get num
"0"
127.0.0.1:6379> set dbl 1.0 
OK
127.0.0.1:6379> get dbl
"1.0"
127.0.0.1:6379> incr dbl #浮点值无法执行加减值
(error) ERR value is not an integer or out of range
127.0.0.1:6379> incrby num 5
(integer) 5
127.0.0.1:6379> decrby num 3
(integer) 2
127.0.0.1:6379> append good machine #把key对应的value转成字符串，再和第三个参数拼接，返回的是拼接后的长度，key如果不存在，则创建value为""的字符串
(integer) 11
127.0.0.1:6379> get good
"luckmachine"
127.0.0.1:6379> append num 6 #把数字1转成字符串，再和6进行拼接，得到16，总长度是2
(integer) 2
127.0.0.1:6379> get num
"16"

#哈希
127.0.0.1:6379> hset myhash username jack
(integer) 1
127.0.0.1:6379> hset myhash age 18
(integer) 1
127.0.0.1:6379> hmset myhash2 username rose age 21 #设置一个哈希对象多个Key和多个Value
OK
127.0.0.1:6379> hget myhash username
"jack"
127.0.0.1:6379> hmget myhash username age #获取一个哈希对象的多个Keys值
1) "jack"
2) "18"
127.0.0.1:6379> hgetall myhash #获取哈希对象的所有Key和Value
1) "username"
2) "jack"
3) "age"
4) "18"
127.0.0.1:6379> hdel myhash2 username age #删除一个哈希对象的多个Key值
(integer) 2
127.0.0.1:6379> hgetall myhash2
(empty list or set)
127.0.0.1:6379> hdel myhash2 username
(integer) 0
127.0.0.1:6379> hmset myhash2 username rose age 21
OK
127.0.0.1:6379> del myhash2 #删除一个哈希对象
(integer) 1
127.0.0.1:6379> get myhash2 #无该对象
(nil)
127.0.0.1:6379> hget myhash2 username #无法获取myhash2的username，但是此时并不知道是myhash2不存在，还是myhash2的username不存在
(nil)
127.0.0.1:6379> get myhash #无法用get获取哈希对象的值
(error) WRONGTYPE Operation against a key holding the wrong kind of value
127.0.0.1:6379> hincrby myhash age 3 #只有hincrby，没有hincr
(integer) 21
127.0.0.1:6379> hget myhash age
"21"
127.0.0.1:6379> hexists myhash username #判断某个哈希对象中的Key是否存在，存在则返回1，不存在返回0
(integer) 1
127.0.0.1:6379> hexists myhash good
(integer) 0
127.0.0.1:6379> hlen myhash #获取哈希对象中的属性个数
(integer) 2
127.0.0.1:6379> hkeys myhash #获取哈希对象中的所有Key
1) "username"
2) "age"
127.0.0.1:6379> hvals myhash #获取哈希对象中的所有Value
1) "jack"
2) "21"

#list
127.0.0.1:6379> lpush mylist a b c
(integer) 3
127.0.0.1:6379> lpush mylist 1 2 3
(integer) 6
127.0.0.1:6379> rpush mylist2 a b c
(integer) 3
127.0.0.1:6379> rpush mylist2 1 2 3
(integer) 6
127.0.0.1:6379> lrange mylist 0 5
1) "3"
2) "2"
3) "1"
4) "c"
5) "b"
6) "a"
127.0.0.1:6379> lrange mylist2 0 5
1) "a"
2) "b"
3) "c"
4) "1"
5) "2"
6) "3"
127.0.0.1:6379> lrange mylist2 -6 -1 #-1表示右数第一个，表示一个位置
1) "a"
2) "b"
3) "c"
4) "1"
5) "2"
6) "3"
127.0.0.1:6379> lrange mylist2 0 -1 #0表示第1个元素，-1表示最后一个元素
1) "a"
2) "b"
3) "c"
4) "1"
5) "2"
6) "3"
127.0.0.1:6379> lpop mylist #弹出后，元素就不存在于list中了
"3"
127.0.0.1:6379> lrange mylist 0 -1
1) "2"
2) "1"
3) "c"
4) "b"
5) "a"
127.0.0.1:6379> rpop mylist2
"3"
127.0.0.1:6379> lrange mylist2 0 -1
1) "a"
2) "b"
3) "c"
4) "1"
5) "2"
127.0.0.1:6379> llen mylist
(integer) 5
127.0.0.1:6379> llen mylist2
(integer) 5
127.0.0.1:6379> llen mylist3
(integer) 0
127.0.0.1:6379> lpushx mylist x # lpushx/rpushx 列表存在才会插入值，列表不存在则不会新建list
(integer) 6
127.0.0.1:6379> lrange mylist 0 -1
1) "x"
2) "2"
3) "1"
4) "c"
5) "b"
6) "a"
127.0.0.1:6379> rpushx mylist3 a
(integer) 0
127.0.0.1:6379> llen mylist3
(integer) 0
127.0.0.1:6379> lpush mylist3 1 2 3
(integer) 3
127.0.0.1:6379> lpush mylist3 1 2 3
(integer) 6
127.0.0.1:6379> lpush mylist3 1 2 3
(integer) 9
127.0.0.1:6379> lrange mylist3 0 -1
1) "3"
2) "2"
3) "1"
4) "3"
5) "2"
6) "1"
7) "3"
8) "2"
9) "1"
127.0.0.1:6379> lrem mylist3 2 3 #lrem key count value，从左侧删除2个3，如果count为正数，则从左侧删除，如果count为负数，则从右侧删除，如果count为0，则删除全部。没有rrem命令
(integer) 2
127.0.0.1:6379> lrange mylist3 0 -1
1) "2"
2) "1"
3) "2"
4) "1"
5) "3"
6) "2"
7) "1"
127.0.0.1:6379> lrem mylist3 -2 1
(integer) 2
127.0.0.1:6379> lrange mylist3 0 -1
1) "2"
2) "1"
3) "2"
4) "3"
5) "2"
127.0.0.1:6379> lrem mylist3 0 2
(integer) 3
127.0.0.1:6379> lrange mylist3 0 -1
1) "1"
2) "3"
127.0.0.1:6379> lset mylist 3 mmm #设置index的值，如果index为负，则表示右侧的位置
OK
127.0.0.1:6379> lset mylist -2 nnn
OK
127.0.0.1:6379> lrange mylist 0 -1
1) "x"
2) "2"
3) "1"
4) "mmm"
5) "nnn"
6) "a"
127.0.0.1:6379> lpush mylist4 a b c
(integer) 3
127.0.0.1:6379> lpush mylist4 a b c
(integer) 6
127.0.0.1:6379> linsert mylist4 before b 11 #在第一个b值前插入11，无rinsert命令
(integer) 7
127.0.0.1:6379> linsert mylist4 after b 22 #在第一个b值后插入22
(integer) 8
127.0.0.1:6379> lrange mylist4 0 -1
1) "c"
2) "11"
3) "b"
4) "22"
5) "a"
6) "c"
7) "b"
8) "a"
127.0.0.1:6379> lpush mylist5 1 2 3
(integer) 3
127.0.0.1:6379> lpush mylist6 a b c
(integer) 3
127.0.0.1:6379> lrange mylist5 0 -1
1) "3"
2) "2"
3) "1"
127.0.0.1:6379> lrange mylist6 0 -1
1) "c"
2) "b"
3) "a"
#https://blog.csdn.net/zlfprogram/article/details/74991884 rpoplpush使用技巧和场景
127.0.0.1:6379> rpoplpush mylist5 mylist6 #rpoplpush把source的右侧pop出，插入destination的左侧
"1"
127.0.0.1:6379> lrange mylist5 0 -1
1) "3"
2) "2"
127.0.0.1:6379> lrange mylist6 0 -1
1) "1"
2) "c"
3) "b"
4) "a"
127.0.0.1:6379> rpoplpush mylist6 mylist6 #rpoplpush也可以只作用自己，则把最右侧元素移到最左侧
"a"
127.0.0.1:6379> lrange mylist6 0 -1
1) "a"
2) "1"
3) "c"
4) "b"
127.0.0.1:6379> lindex mylist 0 #获取索引位置的元素
"x"
127.0.0.1:6379> lindex mylist -2
"nnn"

#set
127.0.0.1:6379> sadd myset a b c
(integer) 3
127.0.0.1:6379> sadd myset a
(integer) 0
127.0.0.1:6379> sadd myset 1 2 3
(integer) 3
127.0.0.1:6379> srem myset 1 2
(integer) 2
127.0.0.1:6379> smembers myset #查看set中的元素，是无序的
1) "b"
2) "3"
3) "c"
4) "a"
127.0.0.1:6379> sismember myset a #元素是否存在，1存在，0不存在
(integer) 1
127.0.0.1:6379> sismember myset x
(integer) 0
127.0.0.1:6379> sadd mya1 a b c
(integer) 3
127.0.0.1:6379> sadd myb1 a c 1 2
(integer) 4
127.0.0.1:6379> sdiff mya1 myb1 #mya1-myb1中差集，可以没有myb1这个key参数，或有多个key参数
1) "b"
127.0.0.1:6379> sdiff myb1 mya1
1) "1"
2) "2"
127.0.0.1:6379> sadd mya2 a b c
(integer) 3
127.0.0.1:6379> sadd myb2 a c 1 2
(integer) 4
127.0.0.1:6379> sinter mya2 myb2 #交集，也可以接多个key，或无第二个key
1) "c"
2) "a"
127.0.0.1:6379> sadd mya3 a b c
(integer) 3
127.0.0.1:6379> sadd myb3 a c 1 2
(integer) 4
127.0.0.1:6379> sunion mya3 myb3 #并集
1) "b"
2) "1"
3) "c"
4) "2"
5) "a"
127.0.0.1:6379> scard myset #获取set的元素个数
(integer) 4
127.0.0.1:6379> srandmember myset #获取set中随机的元素
"3"
127.0.0.1:6379> srandmember myset
"3"
127.0.0.1:6379> srandmember myset
"b"
127.0.0.1:6379> srandmember myset 2 #可以获取多个元素
1) "c"
2) "a"
127.0.0.1:6379> srandmember myset 2
1) "b"
2) "a"
127.0.0.1:6379> sdiffstore my1 mya1 myb1 #sdiffstore 差集存到新的set中
(integer) 1
127.0.0.1:6379> smembers my1
1) "b"
127.0.0.1:6379> sinterstore my2 mya2 myb2 #sinterstore 交集存到新的set中
(integer) 2
127.0.0.1:6379> smembers my2
1) "c"
2) "a"
127.0.0.1:6379> sunionstore my3 mya3 myb3 #sunionstore 并集存到新的set中
(integer) 5
127.0.0.1:6379> smembers my3
1) "b"
2) "1"
3) "c"
4) "2"
5) "a"


#Sorted-Set
127.0.0.1:6379> zadd mysort 70 zs 80 ls 90 ww
(integer) 3
127.0.0.1:6379> zadd mysort 100 zs #用新的score覆盖已有元素，score只能是浮点数
(integer) 0
127.0.0.1:6379> zadd mysort 60 tom
(integer) 1
127.0.0.1:6379> zscore mysort zs #获取成员的分数
"100"
127.0.0.1:6379> zcard mysort #获取key的成员个数
(integer) 4
127.0.0.1:6379> zrem mysort tom ww #删除成员
(integer) 2
127.0.0.1:6379> zcard mysort
(integer) 2
127.0.0.1:6379> zadd mysort 85 jack 95 rose
(integer) 2
127.0.0.1:6379> zrange mysort 0 -1 #获得成员
1) "ls"
2) "jack"
3) "rose"
4) "zs"
127.0.0.1:6379> zrange mysort 0 -1 withscores #获得成员和分数
1) "ls"
2) "80"
3) "jack"
4) "85"
5) "rose"
6) "95"
7) "zs"
8) "100"
127.0.0.1:6379> zrevrange mysort 0 -1 withscores #获得倒序成员
1) "zs"
2) "100"
3) "rose"
4) "95"
5) "jack"
6) "85"
7) "ls"
8) "80"
127.0.0.1:6379> zremrangebyrank mysort 0 4 #按分数排名的排名顺序批量删除成员
(integer) 4
127.0.0.1:6379> zrange mysort 0 -1
(empty list or set)
127.0.0.1:6379> zrange mysort 0 -1 withscores 
1) "zs"
2) "85"
3) "ls"
4) "90"
5) "zl"
6) "95"
7) "ww"
8) "100"
127.0.0.1:6379> zremrangebyscore mysort 85 95 #按分数排名的分数范围批量删除成员
(integer) 3
127.0.0.1:6379> zrange mysort 0 -1 
1) "ww"
127.0.0.1:6379> zrangebyscore mysort 0 100 #获取分数范围的成员
1) "zs"
2) "ls"
3) "zl"
4) "ww"
127.0.0.1:6379> zrangebyscore mysort 0 100 withscores #获取分数范围的成员带分数
1) "zs"
2) "85"
3) "ls"
4) "90"
5) "zl"
6) "95"
7) "ww"
8) "100"
127.0.0.1:6379> zrangebyscore mysort 0 100 withscores limit 0 2 #获取分数范围的成员带分数，获取
1) "zs"
2) "85"
3) "ls"
4) "90"
127.0.0.1:6379> zrangebyscore mysort 0 100 withscores limit 1 2
1) "ls"
2) "90"
3) "zl"
4) "95"
127.0.0.1:6379> zincrby mysort 3 ls #给指定成员增加score
"93"
127.0.0.1:6379> zscore mysort ls
"93"
127.0.0.1:6379> zadd mysort abc dingben
(error) ERR value is not a valid float
127.0.0.1:6379> zadd mysort 85.1 dingben
(integer) 1
127.0.0.1:6379> zrange mysort 0 -1 withscores
 1) "zs"
 2) "85"
 3) "dingben"
 4) "85.099999999999994"
 5) "ls"
 6) "93"
 7) "zl"
 8) "95"
 9) "ww"
10) "100"
127.0.0.1:6379> zcount mysort 80 90 #在min和max分数之间的成员个数
(integer) 2
127.0.0.1:6379> zrank mysort dingben #获取成员的排名
(integer) 1

#keys
127.0.0.1:6379> keys my* #*匹配0到无数个字符
 1) "mylist4"
 2) "mysort"
 3) "mya3"
 4) "myb1"
 5) "myb3"
 6) "mya2"
 7) "myhash"
 8) "mylist"
 9) "myset"
10) "mylist5"
11) "mylist6"
12) "mylist3"
13) "mya1"
14) "myb2"
15) "my1"
16) "mylist2"
17) "my2"
127.0.0.1:6379> keys my? #?匹配一个字符
1) "my1"
2) "my2"
127.0.0.1:6379> del my1 my2 my3 #删除多个key，只有my1和my2，删除了2个，所以返回2
(integer) 2
127.0.0.1:6379> exists my1 #是否存在my1
(integer) 0
127.0.0.1:6379> exists mya1 mya2 #是否存在多个key，返回存在的个数
(integer) 2
127.0.0.1:6379> exists my1 mya1 #只存在1个
(integer) 1
127.0.0.1:6379> get company
"baidu"
127.0.0.1:6379> rename company newcompany #重命名
OK
127.0.0.1:6379> get newcompany
"baidu"
127.0.0.1:6379> expire newcompany 10 #设置key的过期时间，单位为秒，到时间后则删除，无论key是否被访问过
(integer) 1
127.0.0.1:6379> ttl num #查看剩余过期时间，如果未设置的话，返回-1
(integer) -1
127.0.0.1:6379> ttl abc #如果不存在该key的话，返回-2
(integer) -2
127.0.0.1:6379> expire mylist2 100 #设置成功返回1
(integer) 1
127.0.0.1:6379> expire abc 100 #key不存在，设置失败返回1
(integer) 0
127.0.0.1:6379> ttl mylist2
(integer) 80

#sort
127.0.0.1:6379> lrange a 0 -1
1) "9"
2) "3"
3) "6"
4) "1"
127.0.0.1:6379> sort a #临时排序结果
1) "1"
2) "3"
3) "6"
4) "9"
127.0.0.1:6379> lrange a 0 -1 #排序后并未修改list的数据
1) "9"
2) "3"
3) "6"
4) "1"


#查看Key的类型
127.0.0.1:6379> type myhash
hash
127.0.0.1:6379> type name
string
127.0.0.1:6379> type myset
set
127.0.0.1:6379> type mysort
zset

#使用select index 访问其它数据库
127.0.0.1:6379> keys *
 1) "mylist4"
 2) "mysort"
 3) "mya3"
 4) "myb1"
 5) "myb3"
 6) "mya2"
 7) "hello"
 8) "myhash"
 9) "dbl"
10) "mylist"
11) "myset"
12) "mylist5"
13) "good"
14) "mylist6"
15) "name"
16) "person"
17) "mylist3"
18) "mya1"
19) "myb2"
20) "num"
127.0.0.1:6379> move mya1 1
(integer) 1
127.0.0.1:6379> select 1
OK
127.0.0.1:6379[1]> keys *
1) "mya1"

#事务
127.0.0.1:6379> set num 1
OK
127.0.0.1:6379> get num #另一个客户端加1
"1"
127.0.0.1:6379> get num
"2"
127.0.0.1:6379> multi
OK
127.0.0.1:6379> incr num
QUEUED
127.0.0.1:6379> incr num
QUEUED
127.0.0.1:6379> exec
1) (integer) 3
2) (integer) 4
127.0.0.1:6379> set user jack
OK
127.0.0.1:6379> get user
"jack"
127.0.0.1:6379> multi
OK
127.0.0.1:6379> set user lily
QUEUED
127.0.0.1:6379> discard
OK
127.0.0.1:6379> get user
"jack"
127.0.0.1:6379> flushall #清空数据
OK

#获取参数
127.0.0.1:6379> CONFIG GET timeout
1) "timeout"
2) "0"
127.0.0.1:6379> CONFIG GET *
  1) "dbfilename"
  2) "dump.rdb"
  3) "requirepass"
  4) ""
  5) "masterauth"
  6) ""
  7) "cluster-announce-ip"
  8) ""
  9) "unixsocket"
 10) ""
 11) "logfile"
 12) ""
...


127.0.0.1:6379> exit


用宿主机访问虚拟机Linux：
说明：默认情况下，如果没有没有开防火墙（ubuntu系统是ufw，通过sudo ufw status来查看），则可以在宿主机直接访问虚拟机系统。
但是由于redis默认只绑定了本机端口127.0.0.1 ，所以需要把配置文件redis.conf里的：bind 127.0.0.1 。该行注释掉，同时把：protected-mode yes修改为protected-mode no
再启动redis服务：./bin/redis-server ./redis.conf
即可正常访问。
（参考：https://blog.csdn.net/nocol123/article/details/74356752 https://blog.csdn.net/rangf/article/details/41733533）
